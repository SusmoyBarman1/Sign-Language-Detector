import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
import cv2
import os
import urllib.request
import numpy as np
from django.conf import settings
from tensorflow.keras.models import load_model

BASE = os.path.dirname(os.path.abspath(__file__))
model_path = os.path.join(BASE, "yesno.h5")



model = load_model(model_path)

class VideoCamera(object):
	def __init__(self):
		self.video = cv2.VideoCapture(0)

	def __del__(self):
		self.video.release()

	def get_frame(self):
		success, image = self.video.read()

		frame_flip = cv2.flip(image, 1)

		gray = cv2.cvtColor(frame_flip, cv2.COLOR_BGR2GRAY)
    
		blur = cv2.GaussianBlur(gray,(5,5),2)
	    
		minValue = 70
		th3 = cv2.adaptiveThreshold(blur,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY_INV,11,2)
		ret, test_image = cv2.threshold(th3, minValue, 255, cv2.THRESH_BINARY_INV+cv2.THRESH_OTSU)

		img_write_path = BASE + 'yes_11.jpg'
		cv2.imwrite(img_write_path, test_image)

		print(f'\n\n\nimgpath path: {img_write_path}\n\n\n')

		img_size = 256

		new_img = cv2.imread(img_write_path)
		
		resizedImg = cv2.resize(new_img, (img_size, img_size))
		resizedImg = np.expand_dims(resizedImg, axis=0)


		#print(f'\nresizedImg.shape: {resizedImg.shape}\n\n')
		index = np.argmax(model.predict(resizedImg))
		if index==0:
			text = 'Yes'
		if index==1:
			text = 'No'
		#print(f'\n\nPrediction: {index}\n')
		frame_flip = cv2.putText(frame_flip, text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 3,)

		ret, jpeg = cv2.imencode('.jpg', frame_flip) 
		return jpeg.tobytes()


class IPWebCam(object):
	def __init__(self):
		self.url = "http://172.20.10.2:8080/shot.jpg"

	def __del__(self):
		cv2.destroyAllWindows()

	def get_frame(self):
		imgResp = urllib.request.urlopen(self.url)
		imgNp = np.array(bytearray(imgResp.read()), dtype=np.uint8)
		img = cv2.imdecode(imgNp, -1)
		# We are using Motion JPEG, but OpenCV defaults to capture raw images,
		# so we must encode it into JPEG in order to correctly display the
		# video stream
		gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
		faces_detected = face_detection_webcam.detectMultiScale(
			gray, scaleFactor=1.3, minNeighbors=5)
		for (x, y, w, h) in faces_detected:
			cv2.rectangle(img, pt1=(x, y), pt2=(x + w, y + h),
			              color=(255, 0, 0), thickness=2)
		resize = cv2.resize(img, (640, 480), interpolation=cv2.INTER_LINEAR)
		frame_flip = cv2.flip(resize, 1)
		ret, jpeg = cv2.imencode('.jpg', frame_flip)
		return jpeg.tobytes()
